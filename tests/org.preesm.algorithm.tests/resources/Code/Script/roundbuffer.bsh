/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2014 - 2018) :
 *
 * Antoine Morvan <antoine.morvan@insa-rennes.fr> (2017 - 2018)
 * Karol Desnos <karol.desnos@insa-rennes.fr> (2014)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */
// Roundbuffers script

/* Roundbuffer actually acts as a "decimate" actor: only lasts token are kept.
 * It means that if there are six inputs (identified from 1 to 6) consuming one 
 * token each, and one output producing four tokens: only token 3, 4, 5, 6 will be present
 * in the same order on the output.
 *
 * It is slightly different than a strict roundbuffer, where token 1 to 6 would
 * be written in the same order, erasing previous values if the output is full.
 * This would lead to the output composed of the token 5, 6, 3, 4, note that the
 * order is different.
 */

output = outputs.get(0);

// https://stackoverflow.com/questions/3962766/how-to-get-a-reversed-list-view-on-a-list-in-java
reversedInputs = inputs.subList(0, inputs.size());
Collections.reverse(reversedInputs);
totalLengthMatched = 0L;
outSize = output.getNbTokens();


for(input : reversedInputs){
	if (totalLengthMatched < outSize) {
		inSize = input.getNbTokens();
		matchSize = Math.min(outSize - totalLengthMatched, inSize);
		totalLengthMatched = totalLengthMatched  + matchSize;
		input.matchWith(inSize - matchSize, output, outSize - totalLengthMatched, matchSize);
	}
}

if (totalLengthMatched != outSize) {
		throw new RuntimeException("Unsupported roundbuffer with input.nbTokens != output.nbTokens.");
}
