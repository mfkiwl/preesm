/**
 * Copyright or Â© or Copr. IETR/INSA - Rennes (2017 - 2021) :
 *
 * Alexandre Honorat <alexandre.honorat@insa-rennes.fr> (2021)
 *
 * This software is a computer program whose purpose is to help prototyping
 * parallel applications using dataflow formalism.
 *
 * This software is governed by the CeCILL  license under French law and
 * abiding by the rules of distribution of free software.  You can  use,
 * modify and/ or redistribute the software under the terms of the CeCILL
 * license as circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL license and that you accept its terms.
 */

// Generic includes
#[[#]]#include <ap_int.h>
#[[#]]#include <hls_stream.h>


// BEGIN OF AUTOGENERATED PART

// User includes

$USER_INCLUDES

// generate include with all sizes?
#[[#]]#define DATA_SIZE_IN 64

$PREESM_INCLUDES


// END OF AUTOGENERATED PART



template <typename T, int rep = 1>
static void readInput(T* in, hls::stream<T>& inStream, int size) {
	for (int repetition = 0; repetition < rep; repetition ++) {
	for (int i = 0; i < size; i++) {
        inStream << in[i];
    }
	}
}

template <typename T>
static void writeResult(T* out, hls::stream<T>& outStream, int size) {
    for (int i = 0; i < size; i++) {
        out[i] = outStream.read();
    }
}


// no mult factor, to be separated?
template <int NB_STREAMS>
static void duplicateStream(hls::stream<int>& inStream, hls::stream<int> outStream[NB_STREAMS]) {
	int value = inStream.read();
	for (int i = 0; i < NB_STREAMS; i++) {
#pragma HLS UNROLL
		outStream[i] << value;
	}
}


// BEGIN OF AUTOGENERATED PART

extern "C" {
void graph_name(int* in, int* out, int size) {

  static hls::stream<int, 32> inStream("input_stream");
  static hls::stream<int, 32> outStream("output_stream");
  static hls::stream<int, 32> dupStream[2];
  static hls::stream<int, 32> incStream[2];

  static hls::stream<int> array[] = {&inStream, &outStream};


#pragma HLS dataflow
    // dataflow pragma instruct compiler to run following three APIs in parallel
    read_input(in, inStream, size);
    for (int i = 0; i < size; i++) {
#pragma HLS dataflow
    	duplicateStream<2>(inStream, dupStream);
    }
    write_result(out, outStream, size);
    
}
}

// BEGIN OF AUTOGENERATED PART

